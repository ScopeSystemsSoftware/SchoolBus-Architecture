###################################
# Configurare Istio Multi-Tenant pentru SchoolBus
###################################

# VirtualService pentru fiecare tenant pentru rutare pe bază de subdomeniu
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: tenant-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*.schoolbus-mtn.example.com"
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - "*.schoolbus-mtn.example.com"
    tls:
      mode: SIMPLE
      credentialName: schoolbus-credential # Acest secret trebuie creat în istio-system
---
# VirtualService pentru tenant-a
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: tenant-a-vs
  namespace: tenant-tenanta
spec:
  hosts:
  - "tenanta.schoolbus-mtn.example.com"
  gateways:
  - istio-system/tenant-gateway
  http:
  - match:
    - uri:
        prefix: /api
    route:
    - destination:
        host: api-gateway.tenant-tenanta.svc.cluster.local
        port:
          number: 8080
  - route:
    - destination:
        host: frontend.tenant-tenanta.svc.cluster.local
        port:
          number: 80
---
# VirtualService pentru tenant-b
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: tenant-b-vs
  namespace: tenant-tenantb
spec:
  hosts:
  - "tenantb.schoolbus-mtn.example.com"
  gateways:
  - istio-system/tenant-gateway
  http:
  - match:
    - uri:
        prefix: /api
    route:
    - destination:
        host: api-gateway.tenant-tenantb.svc.cluster.local
        port:
          number: 8080
  - route:
    - destination:
        host: frontend.tenant-tenantb.svc.cluster.local
        port:
          number: 80
---
# VirtualService pentru tenant-c
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: tenant-c-vs
  namespace: tenant-tenantc
spec:
  hosts:
  - "tenantc.schoolbus-mtn.example.com"
  gateways:
  - istio-system/tenant-gateway
  http:
  - match:
    - uri:
        prefix: /api
    route:
    - destination:
        host: api-gateway.tenant-tenantc.svc.cluster.local
        port:
          number: 8080
  - route:
    - destination:
        host: frontend.tenant-tenantc.svc.cluster.local
        port:
          number: 80
---
# AuthorizationPolicy pentru a permite accesul doar la propriul tenant
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: tenant-a-policy
  namespace: tenant-tenanta
spec:
  selector:
    matchLabels:
      app: api-gateway
  rules:
  - from:
    - source:
        namespaces: ["tenant-tenanta"]
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: tenant-b-policy
  namespace: tenant-tenantb
spec:
  selector:
    matchLabels:
      app: api-gateway
  rules:
  - from:
    - source:
        namespaces: ["tenant-tenantb"]
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: tenant-c-policy
  namespace: tenant-tenantc
spec:
  selector:
    matchLabels:
      app: api-gateway
  rules:
  - from:
    - source:
        namespaces: ["tenant-tenantc"]
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
---
# PeerAuthentication pentru a impune mTLS strict între serviciile unui tenant
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: tenant-a-mtls
  namespace: tenant-tenanta
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: tenant-b-mtls
  namespace: tenant-tenantb
spec:
  mtls:
    mode: STRICT
---
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: tenant-c-mtls
  namespace: tenant-tenantc
spec:
  mtls:
    mode: STRICT
---
# Service Entry pentru a permite trafic extern către servicii specifice pentru fiecare tenant
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: google-apis
  namespace: istio-system
spec:
  hosts:
  - "*.googleapis.com"
  ports:
  - number: 443
    name: https
    protocol: HTTPS
  resolution: DNS
  location: MESH_EXTERNAL
---
# DestinationRule pentru a defini CircuitBreaker pentru serviciile tenant-ilor
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: api-gateway-circuit-breaker
  namespace: tenant-tenanta
spec:
  host: api-gateway
  trafficPolicy:
    connectionPool:
      http:
        http1MaxPendingRequests: 100
        maxRequestsPerConnection: 10
      tcp:
        maxConnections: 100
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 60s
---
# EnvoyFilter pentru a personaliza header-ele de răspuns cu ID-ul tenant-ului
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: tenant-header-filter
  namespace: istio-system
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: MERGE
      value:
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_response(response_handle)
              local metadata = response_handle:metadata()
              local tenant = metadata:get("tenant_id")
              if tenant ~= nil then
                response_handle:headers():add("x-tenant-id", tenant)
              end
            end 